{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basic Model Pipeline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from data_cleaner import DataCleaner\n",
    "from predictor import Predictor\n",
    "from utils import visualize_all  # Assuming this exists for visualization\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load and clean data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "features_to_drop = [\n",
    "    'Detail',\n",
    "    'Detail on NON UIP',\n",
    "    'Pathology Pattern Binary',\n",
    "    'Pathology pattern',\n",
    "    'Extras AP',\n",
    "    'Treatment',\n",
    "    'Extra',\n",
    "    'Transplantation date',\n",
    "    'Date of death',\n",
    "    'Cause of death',\n",
    "    'Identified Infection',\n",
    "    'Pathology pattern UIP, probable or CHP',\n",
    "    'Severity of telomere shortening - Transform 4',\n",
    "    'FVC (L) 1 year after diagnosis', \n",
    "    'FVC (%) 1 year after diagnosis',\n",
    "    'DLCO (%) 1 year after diagnosis', \n",
    "    'RadioWorsening2y',\n",
    "]   \n",
    "\n",
    "selected_features = [\n",
    "       # 'Pedigree', \n",
    "       'Sex', \n",
    "       'FamilialvsSporadic',\n",
    "       'Age at diagnosis', \n",
    "       'Comorbidities',\n",
    "       'Radiological Pattern', \n",
    "       'Diagnosis after Biopsy',\n",
    "       'Multidsciplinary committee', \n",
    "       'Pirfenidone', \n",
    "       'Nintedanib',\n",
    "       'Antifibrotic Drug', \n",
    "       'Prednisone', \n",
    "       'Mycophenolate',\n",
    "       'Extrapulmonary affectation',\n",
    "       'Associated lung cancer', \n",
    "       'Other cancer', \n",
    "       'Type of neoplasia',\n",
    "       'Blood count abnormality at diagnosis', \n",
    "       'Anemia', \n",
    "       'Thrombocytopenia',\n",
    "       'Thrombocytosis', \n",
    "       'Lymphocytosis', \n",
    "       'Lymphopenia', \n",
    "       'Neutrophilia',\n",
    "       'Neutropenia', \n",
    "       'Leukocytosis', \n",
    "       'Leukopenia',\n",
    "       'LDH', \n",
    "       'ALT',\n",
    "       'AST', \n",
    "       'ALP', \n",
    "       'GGT', \n",
    "       'Transaminitis', \n",
    "       'Cholestasis',\n",
    "       'Liver disease', \n",
    "       #'FVC (L) at diagnosis',\n",
    "       'FVC (%) at diagnosis', \n",
    "       'DLCO (%) at diagnosis',\n",
    "       'Necessity of transplantation', \n",
    "       'Death', \n",
    "       # 'Type of family history',\n",
    "       '1st degree relative', \n",
    "       '2nd degree relative', \n",
    "       'More than 1 relative',\n",
    "       'Genetic mutation studied in patient', \n",
    "       'Mutation Type',\n",
    "       'Severity of telomere shortening',\n",
    "       'Progressive disease',\n",
    "    #    'ProgressiveDisease', \n",
    "       'telomeric affectation', \n",
    "       'Hematologic Abnormalities', \n",
    "       'Liver Problem',\n",
    "       'TERT',\n",
    "       #'COD NUMBER',\n",
    "       'Final diagnosis',\n",
    "       'Event'\n",
    "       ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dropped features: ['Detail', 'Detail on NON UIP', 'Pathology Pattern Binary', 'Pathology pattern', 'Extras AP', 'Treatment', 'Extra', 'Transplantation date', 'Date of death', 'Cause of death', 'Identified Infection', 'Pathology pattern UIP, probable or CHP', 'Severity of telomere shortening - Transform 4', 'FVC (L) 1 year after diagnosis', 'FVC (%) 1 year after diagnosis', 'DLCO (%) 1 year after diagnosis', 'RadioWorsening2y']\n",
      "Filled 10 missing 'Progressive disease' values with 0.\n"
     ]
    }
   ],
   "source": [
    "data_path = 'data/FibroPredCODIFICADA.xlsx'  # Adjust the path as needed\n",
    "df = pd.read_excel(data_path, skiprows=1)\n",
    "\n",
    "# Clean the data\n",
    "cleaner = DataCleaner(df)\n",
    "df_clean = cleaner.clean(selected_features=selected_features, features_to_drop=features_to_drop)\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "df_train, df_test = train_test_split(\n",
    "    df_clean, \n",
    "    test_size=0.2, \n",
    "    shuffle=True, \n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predict Progressive Disease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before dropping missing target 'Progressive disease': (177, 51)\n",
      "After dropping missing target 'Progressive disease': (177, 51)\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "OneHotEncoder.__init__() got an unexpected keyword argument 'sparse'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[4], line 11\u001b[0m\n\u001b[1;32m      8\u001b[0m X_train_prog, y_train_prog \u001b[38;5;241m=\u001b[39m predictor_prog\u001b[38;5;241m.\u001b[39mprepare_data()\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# Train the model\u001b[39;00m\n\u001b[0;32m---> 11\u001b[0m \u001b[43mpredictor_prog\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrain_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train_prog\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train_prog\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# Cross-validated predictions on training set\u001b[39;00m\n\u001b[1;32m     14\u001b[0m y_prob_train_prog \u001b[38;5;241m=\u001b[39m predictor_prog\u001b[38;5;241m.\u001b[39mcross_val_predict_proba(X_train_prog, y_train_prog)\n",
      "File \u001b[0;32m/mnt/c/Users/oriol/OneDrive/Escriptori/bitsXmarato/FibroPred/predictor.py:89\u001b[0m, in \u001b[0;36mPredictor.train_model\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m     77\u001b[0m numeric_transformer \u001b[38;5;241m=\u001b[39m Pipeline(steps\u001b[38;5;241m=\u001b[39m[\n\u001b[1;32m     78\u001b[0m     (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mimputer\u001b[39m\u001b[38;5;124m'\u001b[39m, SimpleImputer(strategy\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m'\u001b[39m)),\n\u001b[1;32m     79\u001b[0m     (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mscaler\u001b[39m\u001b[38;5;124m'\u001b[39m, StandardScaler())\n\u001b[1;32m     80\u001b[0m ])\n\u001b[1;32m     82\u001b[0m binary_transformer \u001b[38;5;241m=\u001b[39m Pipeline(steps\u001b[38;5;241m=\u001b[39m[\n\u001b[1;32m     83\u001b[0m     (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mimputer\u001b[39m\u001b[38;5;124m'\u001b[39m, SimpleImputer(strategy\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmost_frequent\u001b[39m\u001b[38;5;124m'\u001b[39m))\n\u001b[1;32m     84\u001b[0m     \u001b[38;5;66;03m# No scaling or encoding for binary columns\u001b[39;00m\n\u001b[1;32m     85\u001b[0m ])\n\u001b[1;32m     87\u001b[0m categorical_transformer \u001b[38;5;241m=\u001b[39m Pipeline(steps\u001b[38;5;241m=\u001b[39m[\n\u001b[1;32m     88\u001b[0m     (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mimputer\u001b[39m\u001b[38;5;124m'\u001b[39m, SimpleImputer(strategy\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmost_frequent\u001b[39m\u001b[38;5;124m'\u001b[39m)),\n\u001b[0;32m---> 89\u001b[0m     (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124monehot\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[43mOneHotEncoder\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhandle_unknown\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mignore\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m)\n\u001b[1;32m     90\u001b[0m ])\n\u001b[1;32m     92\u001b[0m \u001b[38;5;66;03m# Combine transformers into a ColumnTransformer\u001b[39;00m\n\u001b[1;32m     93\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpreprocessor \u001b[38;5;241m=\u001b[39m ColumnTransformer(\n\u001b[1;32m     94\u001b[0m     transformers\u001b[38;5;241m=\u001b[39m[\n\u001b[1;32m     95\u001b[0m         (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnum\u001b[39m\u001b[38;5;124m'\u001b[39m, numeric_transformer, num_cols),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     98\u001b[0m     ]\n\u001b[1;32m     99\u001b[0m )\n",
      "\u001b[0;31mTypeError\u001b[0m: OneHotEncoder.__init__() got an unexpected keyword argument 'sparse'"
     ]
    }
   ],
   "source": [
    "# Prepare training and testing data for Progressive Disease\n",
    "other_columns_to_drop = ['Death', 'Event', 'Necessity of transplantation']\n",
    "df_train_PROG = df_train.drop(columns=other_columns_to_drop, errors='ignore')\n",
    "df_test_PROG = df_test.drop(columns=other_columns_to_drop, errors='ignore')\n",
    "\n",
    "# Initialize the Predictor for Progressive Disease\n",
    "predictor_prog = Predictor(df_train_PROG, 'Progressive disease')\n",
    "X_train_prog, y_train_prog = predictor_prog.prepare_data()\n",
    "\n",
    "# Train the model\n",
    "predictor_prog.train_model(X_train_prog, y_train_prog)\n",
    "\n",
    "# Cross-validated predictions on training set\n",
    "y_prob_train_prog = predictor_prog.cross_val_predict_proba(X_train_prog, y_train_prog)\n",
    "\n",
    "# Evaluate the model\n",
    "predictor_prog.evaluate_model(y_train_prog, y_prob_train_prog)\n",
    "\n",
    "# Visualize results (if visualize_all function is available)\n",
    "visualize_all(y_true=y_train_prog, y_prob=y_prob_train_prog)\n",
    "\n",
    "# Predict on test set\n",
    "X_test_prog = df_test_PROG.drop(columns=['Progressive disease'], errors='ignore')\n",
    "y_test_prog = df_test_PROG['Progressive disease']\n",
    "y_prob_test_prog = predictor_prog.predict(X_test_prog)\n",
    "\n",
    "# Evaluate on test set\n",
    "print(\"\\nEvaluating Progressive Disease Prediction on Test Set:\")\n",
    "predictor_prog.evaluate_model(y_test_prog, y_prob_test_prog)\n",
    "\n",
    "# Visualize test results (if visualize_all function is available)\n",
    "visualize_all(y_true=y_test_prog, y_prob=y_prob_test_prog, set_type='Test')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predict Event (Death/Transplantation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before dropping missing target 'Event': (177, 52)\n",
      "After dropping missing target 'Event': (177, 52)\n",
      "\n",
      "Training and tuning RandomForest...\n",
      "Best parameters for RandomForest: {'classifier__max_depth': 10, 'classifier__min_samples_split': 2, 'classifier__n_estimators': 100, 'feature_selector__k': 5}\n",
      "Best cross-validation F1 for RandomForest: 0.5786\n",
      "\n",
      "Training and tuning AdaBoost...\n",
      "Best parameters for AdaBoost: {'classifier__learning_rate': 1.0, 'classifier__n_estimators': 100, 'feature_selector__k': 10}\n",
      "Best cross-validation F1 for AdaBoost: 0.6119\n",
      "\n",
      "Training and tuning LogisticRegression...\n",
      "Best parameters for LogisticRegression: {'classifier__C': 1.0, 'classifier__penalty': 'l2', 'classifier__solver': 'lbfgs', 'feature_selector__k': 20}\n",
      "Best cross-validation F1 for LogisticRegression: 0.4389\n",
      "\n",
      "Best classifier after tuning: AdaBoost\n",
      "Best F1 score: 0.6119\n",
      "\n",
      "Top Feature Importances:\n",
      "Age at diagnosis                       0.462119\n",
      "ProgressiveDisease_Prob                0.239949\n",
      "DLCO (%) at diagnosis                  0.211044\n",
      "LDH                                    0.036211\n",
      "1st degree relative                    0.030204\n",
      "Radiological Pattern_Non UIP           0.011319\n",
      "Genetic mutation studied in patient    0.009153\n",
      "FamilialvsSporadic                     0.000000\n",
      "Comorbidities                          0.000000\n",
      "Mutation Type                          0.000000\n",
      "dtype: float64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-Validation: X shape: (177, 51)\n",
      "\n",
      "Evaluation Results:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.8973    0.8851    0.8912       148\n",
      "           1     0.4516    0.4828    0.4667        29\n",
      "\n",
      "    accuracy                         0.8192       177\n",
      "   macro avg     0.6744    0.6839    0.6789       177\n",
      "weighted avg     0.8242    0.8192    0.8216       177\n",
      "\n",
      "F1 Score: 0.4667\n",
      "ROC AUC Score: 0.8911\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Evaluating Event Prediction on Test Set:\n",
      "\n",
      "Evaluation Results:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9756    0.9756    0.9756        41\n",
      "           1     0.7500    0.7500    0.7500         4\n",
      "\n",
      "    accuracy                         0.9556        45\n",
      "   macro avg     0.8628    0.8628    0.8628        45\n",
      "weighted avg     0.9556    0.9556    0.9556        45\n",
      "\n",
      "F1 Score: 0.7500\n",
      "ROC AUC Score: 0.9817\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Prepare training and testing data for Event prediction\n",
    "other_columns_to_drop = ['Necessity of transplantation', 'Death', 'Progressive disease']\n",
    "df_train_EVENT = df_train.drop(columns=other_columns_to_drop, errors='ignore')\n",
    "df_test_EVENT = df_test.drop(columns=other_columns_to_drop, errors='ignore')\n",
    "\n",
    "# Add ProgressiveDisease_Prob as a feature\n",
    "df_train_EVENT['ProgressiveDisease_Prob'] = y_prob_train_prog\n",
    "df_test_EVENT['ProgressiveDisease_Prob'] = y_prob_test_prog\n",
    "\n",
    "# Initialize the Predictor for Event\n",
    "predictor_event = Predictor(df_train_EVENT, 'Event')\n",
    "X_train_event, y_train_event = predictor_event.prepare_data()\n",
    "\n",
    "# Train the model\n",
    "predictor_event.train_model(X_train_event, y_train_event)\n",
    "\n",
    "# Cross-validated predictions on training set\n",
    "y_prob_train_event = predictor_event.cross_val_predict_proba(X_train_event, y_train_event)\n",
    "\n",
    "# Evaluate the model\n",
    "predictor_event.evaluate_model(y_train_event, y_prob_train_event)\n",
    "\n",
    "# Visualize results (if visualize_all function is available)\n",
    "visualize_all(y_true=y_train_event, y_prob=y_prob_train_event)\n",
    "\n",
    "# Predict on test set\n",
    "X_test_event = df_test_EVENT.drop(columns=['Event'], errors='ignore')\n",
    "y_test_event = df_test_EVENT['Event']\n",
    "y_prob_test_event = predictor_event.predict(X_test_event)\n",
    "\n",
    "# Evaluate on test set\n",
    "print(\"\\nEvaluating Event Prediction on Test Set:\")\n",
    "predictor_event.evaluate_model(y_test_event, y_prob_test_event)\n",
    "\n",
    "# Visualize test results (if visualize_all function is available)\n",
    "visualize_all(y_true=y_test_event, y_prob=y_prob_test_event, set_type='Test')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fibropred",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
